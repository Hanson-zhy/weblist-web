// 文件管理功能
document.addEventListener('DOMContentLoaded', () => {
    // DOM 元素
    const listViewBtn = document.getElementById('listViewBtn');
    const gridViewBtn = document.getElementById('gridViewBtn');
    const listContainer = document.getElementById('listContainer');
    const gridContainer = document.getElementById('gridContainer');
    const contextMenu = document.getElementById('contextMenu');
    const fileList = document.getElementById('fileList');
    const deleteBtn = document.getElementById('deleteBtn');
    const uploadBtn = document.getElementById('uploadBtn');
    const newFolderBtn = document.getElementById('newFolderBtn');
    const shareBtn = document.getElementById('shareBtn');
    const searchInput = document.getElementById('searchInput');
    const fileCount = document.getElementById('fileCount');
    const selectedCount = document.getElementById('selectedCount');
    
    // 当前选中的文件项
    let selectedFileItem = null;
    let currentLayout = 'list';
    let isCtrlPressed = false;
    let selectedFiles = new Set();
    
    // 布局切换
    function switchLayout(layout) {
        currentLayout = layout;
        // 更新按钮状态
        listViewBtn.classList.remove('active');
        gridViewBtn.classList.remove('active');
        
        // 隐藏所有布局
        listContainer.classList.remove('active');
        gridContainer.classList.remove('active');
        
        if (layout === 'list') {
            listViewBtn.classList.add('active');
            listContainer.classList.add('active');
        } else {
            gridViewBtn.classList.add('active');
            gridContainer.classList.add('active');
        }
    }
    
    listViewBtn.addEventListener('click', () => {
        switchLayout('list');
    });
    
    gridViewBtn.addEventListener('click', () => {
        switchLayout('grid');
    });
    
    // 文件项点击效果
    function toggleFileSelection(fileItem, isCtrlKey) {
        if (!isCtrlKey) {
            // 清除所有选中
            document.querySelectorAll('.file-item.selected, .file-card.selected').forEach(item => {
                item.classList.remove('selected');
                selectedFiles.delete(item);
            });
        }
        
        // 切换当前项选中状态
        fileItem.classList.toggle('selected');
        
        if (fileItem.classList.contains('selected')) {
            selectedFiles.add(fileItem);
        } else {
            selectedFiles.delete(fileItem);
        }
        
        // 更新选中计数
        updateSelectionCount();
    }
    
    function updateSelectionCount() {
        selectedCount.textContent = selectedFiles.size;
        
        // 更新工具栏按钮状态
        const hasSelection = selectedFiles.size > 0;
        deleteBtn.disabled = !hasSelection;
        shareBtn.disabled = !hasSelection;
    }
    
    // 为文件容器添加事件监听
    listContainer.addEventListener('click', function(e) {
        const fileItem = e.target.closest('.file-item');
        if (fileItem) {
            toggleFileSelection(fileItem, e.ctrlKey || e.metaKey);
        }
    });
    
    gridContainer.addEventListener('click', function(e) {
        const fileCard = e.target.closest('.file-card');
        if (fileCard) {
            toggleFileSelection(fileCard, e.ctrlKey || e.metaKey);
        }
    });
    
    // 点击空白区域取消所有选择
    document.addEventListener('click', function(e) {
        const isFileItem = e.target.closest('.file-item, .file-card');
        const isToolbarBtn = e.target.closest('.toolbar-btn, .action-btn');
        const isContextMenu = e.target.closest('.context-menu');
        
        if (!isFileItem && !isToolbarBtn && !isContextMenu) {
            // 清除所有选中
            document.querySelectorAll('.file-item.selected, .file-card.selected').forEach(item => {
                item.classList.remove('selected');
            });
            selectedFiles.clear();
            updateSelectionCount();
        }
    });
    
    // 键盘事件
    document.addEventListener('keydown', function(e) {
        // 记录Ctrl键状态
        if (e.key === 'Control' || e.key === 'Meta') {
            isCtrlPressed = true;
        }
        
        // Delete键删除选中项
        if (e.key === 'Delete' && selectedFiles.size > 0) {
            const confirmed = confirm(`确定要删除 ${selectedFiles.size} 个文件吗？`);
            if (confirmed) {
                selectedFiles.forEach(item => {
                    item.remove();
                });
                selectedFiles.clear();
                updateSelectionCount();
                showNotification(`${selectedFiles.size}个文件已删除`);
            }
        }
        
        // Ctrl+A全选
        if ((e.ctrlKey || e.metaKey) && e.key === 'a') {
            e.preventDefault();
            
            const items = currentLayout === 'list' 
                ? document.querySelectorAll('.file-item') 
                : document.querySelectorAll('.file-card');
            
            items.forEach(item => {
                item.classList.add('selected');
                selectedFiles.add(item);
            });
            
            updateSelectionCount();
        }
    });
    
    document.addEventListener('keyup', function(e) {
        if (e.key === 'Control' || e.key === 'Meta') {
            isCtrlPressed = false;
        }
    });
    
    // 删除按钮事件
    deleteBtn.addEventListener('click', function() {
        if (selectedFiles.size === 0) return;
        
        const confirmed = confirm(`确定要删除 ${selectedFiles.size} 个文件吗？`);
        if (confirmed) {
            selectedFiles.forEach(item => {
                item.remove();
            });
            selectedFiles.clear();
            updateSelectionCount();
            showNotification(`${selectedFiles.size}个文件已删除`);
        }
    });
    
    // 上传按钮事件
    uploadBtn.addEventListener('click', function() {
        showNotification('上传功能已触发');
    });
    
    // 新建文件夹按钮事件
    newFolderBtn.addEventListener('click', function() {
        showNotification('新建文件夹功能已触发');
    });
    
    // 分享按钮事件
    shareBtn.addEventListener('click', function() {
        if (selectedFiles.size === 0) return;
        showNotification(`已分享 ${selectedFiles.size} 个文件`);
    });
    
    // 搜索功能
    searchInput.addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        
        // 列表布局搜索
        const listItems = document.querySelectorAll('.file-item');
        listItems.forEach(item => {
            const fileName = item.querySelector('.file-name').textContent.toLowerCase();
            item.style.display = fileName.includes(searchTerm) ? 'grid' : 'none';
        });
        
        // 网格布局搜索
        const gridItems = document.querySelectorAll('.file-card');
        gridItems.forEach(item => {
            const fileName = item.querySelector('.card-name').textContent.toLowerCase();
            item.style.display = fileName.includes(searchTerm) ? 'block' : 'none';
        });
    });
    
    // 右键菜单功能实现
    document.addEventListener('contextmenu', function(e) {
        // 检查是否点击在文件项上
        const fileItem = e.target.closest('.file-item, .file-card');
        if (fileItem) {
            e.preventDefault();
            selectedFileItem = fileItem;
            
            // 显示菜单
            contextMenu.style.display = 'block';
            contextMenu.style.left = `${e.pageX}px`;
            contextMenu.style.top = `${e.pageY}px`;
        }
    });
    
    // 菜单项点击事件
    contextMenu.querySelectorAll('.context-menu-item').forEach(item => {
        item.addEventListener('click', function() {
            const action = this.getAttribute('data-action');
            let fileName = '';
            
            if (selectedFileItem) {
                if (selectedFileItem.classList.contains('file-item')) {
                    fileName = selectedFileItem.querySelector('.file-name').textContent;
                } else {
                    fileName = selectedFileItem.querySelector('.card-name').textContent;
                }
                
                showNotification(`对文件 "${fileName}" 执行了操作: ${action}`);
            }
            
            // 隐藏菜单
            contextMenu.style.display = 'none';
        });
    });
    
    // 点击其他地方隐藏菜单
    document.addEventListener('click', function(e) {
        if (!contextMenu.contains(e.target)) {
            contextMenu.style.display = 'none';
        }
    });
    
    // 显示通知
    function showNotification(message) {
        const existing = document.querySelector('.notification');
        if (existing) existing.remove();
        
        const notification = document.createElement('div');
        notification.className = 'notification';
        notification.innerHTML = `<i class="fas fa-check-circle mr-2"></i> ${message}`;
        document.body.appendChild(notification);
        
        setTimeout(() => {
            notification.remove();
        }, 3000);
    }
    
    // 初始化布局
    switchLayout('list');
});